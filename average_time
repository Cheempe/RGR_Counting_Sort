import kotlin.system.measureNanoTime
import kotlin.random.Random

fun countingSort(arr: IntArray) {
    val max = arr.maxOrNull() ?: 0
    val count = IntArray(max + 1)
    val output = IntArray(arr.size)

    for (num in arr) {
        count[num]++
    }

    var index = 0
    for (i in count.indices) {
        while (count[i] > 0) {
            output[index] = i
            index++
            count[i]--
        }
    }

    for (i in arr.indices) {
        arr[i] = output[i]
    }
}

fun bubbleSort(arr: IntArray) {
    val n = arr.size
    for (i in 0 until n - 1) {
        for (j in 0 until n - i - 1) {
            if (arr[j] > arr[j + 1]) {
                val temp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = temp
            }
        }
    }
}

fun generateRandomArray(size: Int, maxVal: Int): IntArray {
    return IntArray(size) { Random.nextInt(0, maxVal) }
}

fun main() {
    println("Enter the maximum value (maxVal): ")
    val maxVal = readLine()?.toIntOrNull() ?: 1000

    println("Enter the array size: ")
    val arraySize = readLine()?.toIntOrNull() ?: 1000

    val numArrays = 100

    var countingSortTimeSum = 0L
    var bubbleSortTimeSum = 0L
    var countingSortMemorySum = 0L

    for (i in 1..numArrays) {
        val arr = generateRandomArray(arraySize, maxVal)

        val countingSortBeforeMem = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()
        val countingSortTime = measureNanoTime {
            countingSort(arr)
        }
        val countingSortAfterMem = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()
        countingSortTimeSum += countingSortTime
        countingSortMemorySum += countingSortAfterMem - countingSortBeforeMem

        val bubbleSortTime = measureNanoTime {
            bubbleSort(arr.clone())
        }
        bubbleSortTimeSum += bubbleSortTime
    }

    val avgCountingSortTime = countingSortTimeSum / numArrays
    val avgBubbleSortTime = bubbleSortTimeSum / numArrays
    val avgCountingSortMemory = countingSortMemorySum / numArrays

    println("Average Counting Sort Time: $avgCountingSortTime ns")
    println("Average Bubble Sort Time: $avgBubbleSortTime ns")
    println("Average Counting Sort Memory: $avgCountingSortMemory bytes")
}

